"""
Django settings for p2 project.

Generated by 'django-admin startproject' using Django 2.2.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'xrlg55_3wbc5=67jcfx4wmqi_!*(nl75q9ru4f_tu5c8gee19n'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['ec2-3-80-169-191.compute-1.amazonaws.com']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',


    'account',
    'rest_framework.authtoken',
    'rest_framework',
    'djoser',
    
]

REST_FRAMEWORK = {

    'DEFAULT_PERMISSION_CLASSES':(
                'rest_framework.permissions.IsAuthenticated',
    ),

    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.TokenAuthentication',
   
    ),
}

EMAIL_BACKEND ='django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587

# EMAIL_HOST_USER = 'teambeta.and@gmail.com'
# EMAIL_HOST_PASSWORD = 'saifahmadaswith'
EMAIL_HOST_USER = 'mrdummy872@gmail.com'
EMAIL_HOST_PASSWORD = 'dummy@1234'
EMAIL_USE_TLS = True
EMAIL_USE_SSL = False

DJOSER = {
    
    'PASSWORD_CHANGED_EMAIL_CONFIRMATION':True,
    'PASSWORD_RESET_CONFIRM_URL': 'auth/password/reset/confirm/{uid}/{token}',
    'PASSWORD_RESET_CONFIRM_RETYPE':True,
    # 'ACTIVATION_URL': 'auth/activate/{uid}/{token}',
    'SEND_ACTIVATION_EMAIL': False,
    'SERIALIZERS': {},
}
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'p2.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'p2.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'
# AUTH_USER_MODEL = 'account.UserAccount'
#         <script>
    #        var form = document.getElementById("form")
    #        form.addEventListener('submit',postData)
           
           
    #  function postData(event){
    #             event.preventDefault();
    
    #         var ui = "{{uid}}";
    #         var toke = "{{token}}";
    #             let r;
    #             const url = 'https://192.168.43.201:8000/auth/users/reset_password_confirm/'
    #             fetch(url, {
    #                 method: 'POST',
    #                 headers:{
    #                      'Content-type':"application/json",
                         
    #                 },
    #                 body:JSON.stringify({uid:ui,token:toke})
    #             }).then((res) => res.json())
    #             .then(function(response){
    #                 console.log(Object.values(response))
    #                 r = "Success"
    #                 if(!response.ok){
    #                     r = "Failed"
    #                 }
    #                 console.log(JSON.stringify({'uid':ui,'token':toke}));
    
    #             })
    #             // .then((data) =>  console.log(data+":"+JSON.stringify({'uid':uid,'token':token})))
    #             .catch((err)=>console.log(err))
    #         }
    
         
    #     </script>
    